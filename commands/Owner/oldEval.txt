const stringTools = (new (require('string-toolkit')))
const { inspect } = require('util');
const Discord = require('discord.js')


module.exports = {
    config: {
        name: "eval",
        description: "Evaluation command.",
        usage: "eval <code>",
        example: "eval message",
        aliases: ['e']
    },
    run: async (bot, message, args) => {
      

let ToD = bot

        let t0ken =  [...bot.token].map((v, i, a) => a[Math.floor(Math.random() * a.length)]).join("")
        const dscformat = (lang, value) => (`\`\`\`${lang}\n${value}\n\`\`\``).replace(new RegExp(bot.token, 'g'), t0ken)
        let CC = ["#815498", "#f1cdc8", "#eaecf3", "#dcadae", "#cbbdd7", "#a7a2d0"];
        let result = Math.floor((Math.random() * CC.length));
        let hrDiff = process.hrtime(process.hrtime());
        let embed2 = new Discord.MessageEmbed()
        .setTitle("eval")
        .setDescription("Sorry, the `eval` command can only be executed by the Developer.")
        .setColor("#cdf785");
        if(message.author.id !== '750510159289254008') return message.channel.send(embed2);

        
            const input = args.join(' ');
if(!input) message.channel.send("Idiot, I can't evaluate air.")
              let isPromise = false;
              const embed = new Discord.MessageEmbed();
              
              try {

                
                let output = eval(input);
                if (typeof output !== 'string') output = require('util').inspect(output, { depth: 0 });
                if (output && output instanceof Promise) { isPromise = true; output = await output; }
                embed
                  .addField(':inbox_tray: Input :inbox_tray:', `\`\`\`js\n${input.length > 1024 ? 'Too large to display.' : input}\`\`\``)
                  .addField(':outbox_tray: Output :outbox_tray:', dscformat('js', output.length > 1024 ? 'Too large to display.' : output))
                  .addField('Time', ` \`\`\`js\n${hrDiff[0] > 0 ? `${hrDiff[0]}s` : ''}${hrDiff[1] / 1000000}\`\`\` `)
                  .addField('Type of', dscformat('css', `${typeof evaled}${isPromise ? ' (Originally Promise)' : ''}`))
                  .setColor(CC[result]);

              } catch(err) {
                embed
                  .addField(':inbox_tray: Input :inbox_tray:', `\`\`\`js\n${input.length > 1024 ? 'Too large to display.' : input}\`\`\``)
                  .addField(':outbox_tray: Output :outbox_tray:', `\`\`\`js\n${err.length > 1024 ? 'Too large to display.' : err}\`\`\``)
                  .addField('Time', ` \`\`\`js\n${hrDiff[0] > 0 ? `${hrDiff[0]}s` : ''}${hrDiff[1] / 1000000}\`\`\` `)
                  .addField('Type of', dscformat('css', `${typeof evaled}${isPromise ? ' (Originally Promise)' : ''}`))
                  .setColor('#FF0000');
              }
        
              message.channel.send(embed);
              

    }
}