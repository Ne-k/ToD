const {ApplicationCommandType, EmbedBuilder, ButtonBuilder, ActionRowBuilder} = require("discord.js");
const { Configuration, OpenAIApi } = require("openai");
const fs = require('fs');
const download = require('image-downloader');

module.exports = {
    name: 'ai_variation',
    description: "Get a variation of a picture you upload by using OpenAI",
    type: ApplicationCommandType.ChatInput,
    category: "anime",
    cooldown: 5000,
    options: [
        {
            name: "attachment",
            description: "The picture you want the ai to get a finish/variation of",
            type: 11,
            required: true
        }
    ],
    run: async (client, interaction) => {
        interaction.reply({
            content: "Generating. . ."
        })
        const attachment = interaction.options.get("attachment").attachment;
       // const fileName = attachment.url.split("/")[attachment.url.split("/").length-1].split("?")[0]
        let fileName = "";
        if (!fs.existsSync('../../temp')) {
            fs.mkdirSync('../../temp');
        }

       const imageRegex = /(http(s?):)([/|.|\w|\s|-])*\.(?:jpg|png|webp)/i;
        if (!imageRegex.test(attachment.url)) {
            return interaction.reply({
                embeds: [
                    new EmbedBuilder()
                        .setTitle("Error!")
                        .setDescription("The attachment you provided is not a image")
                        .setColor("Red")
                ]
            });
        }



        const configuration = new Configuration({
            apiKey: process.env.OPENAIKEY,
        });
        const openai = new OpenAIApi(configuration);



        download.image({
            url: attachment.url,
            dest: '../../temp',
            extractFilename: true
        })
            .then(async ({filename, image}) => {
                fileName = filename;
                const data = await openai.createImageVariation(
                    fs.createReadStream(filename),
                    1,
                    "1024x1024"
                );
                await interaction.deleteReply()

                return interaction.channel.send({
                    embeds: [
                        new EmbedBuilder()
                            .setTitle("Variation of your image")
                            .setDescription(`Here is a image generated by OpenAI based on your attachment`)
                            .setImage(data.data.data[0].url)
                            .setColor("Random")
                            .setFooter({text: `Requested by ${interaction.user.tag}`})
                    ],
                }).then(() => {
                    fs.unlinkSync(filename);
                })
            }).catch((err) => {
            if (fs.readFileSync(fileName)) {
                fs.unlinkSync(fileName);
            }

                console.log(err)
                if(err.response) {
                    return interaction.channel.send({
                        embeds: [
                            new EmbedBuilder()
                                .setTitle("Error!")
                                .setDescription(`${err.response.data.error.message}\nWe currently only support images with a size of 1024x1024, you can use tools like [this](https://convert-my-image.com/ImageConverter) to resize the image to 1024x1024`)
                                .setColor("Red")
                                .setFooter({text: `Requested by ${interaction.user.tag}`})
                        ]
                    })
                } else {
                    return interaction.channel.send({
                        embeds: [
                            new EmbedBuilder()
                                .setTitle("Error!")
                                .setDescription(`An error occurred while generating the image. Please try again later`)
                                .setColor("Red")
                                .setFooter({text: `Requested by ${interaction.user.tag}`})
                        ]
                    })
                }
        })


    }
}