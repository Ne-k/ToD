const {ApplicationCommandType, EmbedBuilder, ButtonBuilder, ActionRowBuilder} = require("discord.js");
const { Configuration, OpenAIApi } = require("openai");
const BlacklistedWords = require("../../BlacklistedWords.json");

module.exports = {
    name: 'ai_generate',
    description: "Get ai generated pictures based on your prompt by using OpenAI",
    type: ApplicationCommandType.ChatInput,
    category: "anime",
    cooldown: 5000,
    options: [
        {
            name: "prompt",
            description: "The prompt for the ai to generate a picture based on",
            type: 3,
            required: true
        }
    ],
    run: async (client, interaction) => {

        const prompt = interaction.options.getString("prompt");

        const blacklistedWord = BlacklistedWords.find(word => prompt.match(new RegExp(`\\b${word}\\b`, "gi")));
        if (blacklistedWord) return interaction.reply({
            content: "** **",
            embeds: [
                new EmbedBuilder()
                    .setTitle("Error!")
                    .setDescription(`The prompt you provided contains a blacklisted word:\`${blacklistedWord}\``)
                    .setColor("Red")
                    .setFooter({text: "Think this is an error? Run the /suggest command and press the Other button and input the blacklisted word followed by some context"})
            ]
        });

        interaction.reply({
            content: "Generating. . ."
        })
        const configuration = new Configuration({
            apiKey: process.env.OPENAIKEY,
        });
        const openai = new OpenAIApi(configuration);

        try {
            await openai.createImage({
                prompt: prompt,
                n: 1,
                size: "1024x1024",
            }).then((data) => {
                const urlButton = new ButtonBuilder()
                    .setLabel('Click here to see the image')
                    .setStyle(5)
                    .setURL(data.data.data[0].url);
                const row = new ActionRowBuilder()
                    .addComponents(urlButton);

                return interaction.channel.send({
                    embeds: [
                        new EmbedBuilder()
                            .setTitle("Generated image")
                            .setDescription(`Here is a image generated by OpenAI based on:\n\`${prompt}\``)
                            .setImage(data.data.data[0].url)
                            .setColor("Random")
                            .setFooter({text: `Requested by ${interaction.user.tag}`})
                    ],
                    components: [
                        row
                    ]
                }).then(() => {
                    interaction.deleteReply();
                })
            })
        } catch (error) {
            return interaction.channel.send({
                content: "** **",
                embeds: [
                    new EmbedBuilder()
                        .setTitle("Error!")
                        .setDescription(`"${error.response.data.error.message}" - OpenAI`)
                        .setColor("Red")
                        .setFooter({text: `Requested by ${interaction.user.tag}`})
                    ]
            })
        }
    }
    }